
#include <ctime>

struct std::tm;
		
typedef struct _SYSTEMTIME {
  WORD wYear;
  WORD wMonth;
  WORD wDayOfWeek;
  WORD wDay;
  WORD wHour;
  WORD wMinute;
  WORD wSecond;
  WORD wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;



c_time.tm_sec
c_time.tm_min
c_time.tm_hour
c_time.tm_mday
c_time.tm_mon
c_time.tm_year
c_time.tm_wday
c_time.tm_yday
c_time.tm_isdst

Daylight Saving Time flag. The value is positive if DST is in effect, zero if not and negative if no information is available
No



std::tm window_time_to_C_time_tm( const Windows::SYSTEMTIME& winSysTime )
{
	std::tm		c_time;

c_time.tm_sec		= winSysTime.wSecond;
c_time.tm_min		= winSysTime.wMinute;
c_time.tm_hour		= winSysTime.wHour;
c_time.tm_mday		= winSysTime.wDay;
c_time.tm_mon		= winSysTime.wMonth - 1;
c_time.tm_year		= winSysTime.wYear - 1900; /* 1900 is zero year */
c_time.tm_wday		= winSysTime.wDayOfWeek;
c_time.tm_yday		= /* ignored */
c_time.tm_isdst		= /* ignored */

return c_time;

}



  WORD wYear;
  WORD wMonth;
  WORD wDayOfWeek;
  WORD wDay;
  WORD wHour;
  WORD wMinute;
  WORD wSecond;
  WORD wMilliseconds;

Structure holding a calendar date and time broken down into its components.
Member objects
int tm_sec
	seconds after the minute – [0, 61] (until C++11)[0, 60] (since C++11)[note 1]
(public member object)
int tm_min
	minutes after the hour – [0, 59]
(public member object)
int tm_hour
	hours since midnight – [0, 23]
(public member object)
int tm_mday
	day of the month – [1, 31]
(public member object)
int tm_mon
	months since January – [0, 11]
(public member object)
int tm_year
	years since 1900
(public member object)
int tm_wday
	days since Sunday – [0, 6]
(public member object)
int tm_yday
	days since January 1 – [0, 365]
(public member object)
int tm_isdst
	Daylight Saving Time flag. The value is positive if DST is in effect, zero if not and negative if no information is available
(public member object)
Notes





A file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 A.M. January 1, 1601 Coordinated Universal Time (UTC). The system records file times when applications create, access, and write to files.

#define TICKS_PER_SECOND 10000000
#define EPOCH_DIFFERENCE 11644473600LL
time_t convertWindowsTimeToUnixTime(long long int input){
    long long int temp;
    temp = input / TICKS_PER_SECOND; //convert from 100ns intervals to seconds;
    temp = temp - EPOCH_DIFFERENCE;  //subtract number of seconds between epochs
    return (time_t) temp;
}



#include <windows.h>
#include <time.h>

void TimetToFileTime( time_t t, LPFILETIME pft )
{
    LONGLONG ll = Int32x32To64(t, 10000000) + 116444736000000000;
    pft->dwLowDateTime = (DWORD) ll;
    pft->dwHighDateTime = ll >>32;
}

seconds to millis:
seconds * 1000;

seconds to nanos:
seconds * 1000 * 1000;

seconds to 100-nano units:
seconds * 1000 * 1000 / 100;


Windows::FILETIME   time_t_to_win_filetime(const struct time_t& t)
{

}


std::time_t  win_filetime_to_time_t(const Windows::FILETIME& ft)
{

}



#include <ctime>
namespace Windows {
#include <Windows.h>
};


Windows::FILETIME   time_t_to_win_filetime( const std::time_t& t );

std::time_t  win_filetime_to_time_t( const Windows::FILETIME& ft );

std::tm window_time_to_C_time_tm( const Windows::SYSTEMTIME& winSysTime );




#include <chrono>

Windows::FILETIME	time_time_t_to_win_file_time( const std::time_t& t );
std::time_t			time_win_file_time_to_time_t( const Windows::FILETIME& );


	template <typename T>
	std::string to_binary( const T& rawValue )
	{
		std::string	str;

		unsigned char *pc = reinterpret_cast<unsigned char *>(&rawValue);

		uintmax_t value = static_cast<uintmax_t>(rawValue);

		size_t numBits = 8 * sizeof( rawValue );

		str.reserve( numBits );

		for ( size_t i = 0; i < numBits; ++i )
		{
			size_t y = 1 << (numBits - i - 1);
			if ( value & y )
			{
				str.push_back( '1' );
			} else
			{
				str.push_back( '0' );
			}
		}

		return str;
	}


Windows::FILETIME	time_time_t_to_win_file_time( const std::time_t& t )
{
	/* t is seconds, windows time is 100ns ticks, so
	millis->micros->nanos / 100
	1000L * 1000L * 1000L / 100L */
	uint64_t windowsTicks = t * 1000L * 1000L * 1000L / 100L;

	/*
	Windows Epoch is in 1601 or some goddamn thing.  I don't know.
	offset is 116444736000000000L	
	*/
	windowsTicks += 116444736000000000L;

	Windows::FILETIME ft;
	
    ft.dwLowDateTime  = 0xFFFFFFFF & (windowsTicks >> 0);
    ft.dwHighDateTime = 0xFFFFFFFF & (windowsTicks >> 32);

	std::cout << to_binary( ft ) << std::endl;


	return ft;
}



std::time_t			time_win_file_time_to_time_t( const Windows::FILETIME& ft )
{
	uint64_t	highPart = ft.dwHighDateTime;
	highPart <<= 32;

	uint64_t	windowsTicks = highPart & ft.dwLowDateTime;

	// correct for offset:
	windowsTicks -= 116444736000000000L;

	std::cout << to_binary( ft ) << std::endl;

	//correct for duration:
	windowsTicks /= (1000L * 1000L * 1000L / 100L);

	std::time_t t = windowsTicks;

	return t;

}


int	main( int argc, char *argv[] )
{
//Windows::FILETIME		time_time_t_to_win_file_time( const std::time_t& t );
//std::time_t			time_win_file_time_to_time_t( const Windows::FILETIME& );

	std::time_t current_time = std::time(nullptr);

	auto wft = time_time_t_to_win_file_time( current_time );

	std::time_t conversion_time = time_win_file_time_to_time_t( wft );

	std::cout << "original time_t :  " << current_time << std::endl;
	std::cout << "converted time_t : " << conversion_time << std::endl;


	std::cin.get();
	return 0;
}

int crap( int argc, char *argv[] )
{
	Settings settings;
	std::ostringstream ofileListString;

	settings.processArgs( argc, argv );

	Path outPath = settings.getOutputFilePath();

	if ( !std::filesystem::exists( outPath ) || settings.allowOverwrite() )
	{
		auto listDirIt = std::filesystem::directory_iterator( settings.getListingDirectory() );
		auto i = 0;
		for ( auto& dirEntry : listDirIt )
		{
			if ( dirEntry.is_regular_file() )
			{
				ofileListString << dirEntry.path().filename().generic_string() << '\n';
			}
			++i;
		}

		std::ofstream	outfile( outPath );
		outfile << ofileListString.str();
		outfile.close();

		std::cout << "Wrote " << i << " filenames to " << outPath << std::endl;
	} else
	{
		std::cout << "Cannot generate file listing : the file "
			<< outPath.generic_string() << " already exists, and overwriting is not allowed." << std::endl;
	}


	std::cin.get();
	return 0;
}



std::tm window_time_to_C_time_tm( const Windows::SYSTEMTIME& winSysTime )
{
	std::tm		c_time;

	c_time.tm_sec = winSysTime.wSecond;
	c_time.tm_min = winSysTime.wMinute;
	c_time.tm_hour = winSysTime.wHour;
	c_time.tm_mday = winSysTime.wDay;
	c_time.tm_mon = winSysTime.wMonth - 1;
	c_time.tm_year = winSysTime.wYear - 1900; /* 1900 is zero year */
	c_time.tm_wday = winSysTime.wDayOfWeek;
	/* c_time.tm_yday		= (ignored) */
	/* c_time.tm_isdst		= (ignored) */

	auto tt = std::mktime ( &c_time );
	// debug:
	std::cout << std::asctime ( &c_time ) << std::endl;
	c_time = *std::localtime( &tt );
	std::cout << std::asctime ( &c_time ) << std::endl;


	return c_time;

}


