
#include <ctime>

struct std::tm;
		
typedef struct _SYSTEMTIME {
  WORD wYear;
  WORD wMonth;
  WORD wDayOfWeek;
  WORD wDay;
  WORD wHour;
  WORD wMinute;
  WORD wSecond;
  WORD wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;



c_time.tm_sec
c_time.tm_min
c_time.tm_hour
c_time.tm_mday
c_time.tm_mon
c_time.tm_year
c_time.tm_wday
c_time.tm_yday
c_time.tm_isdst

Daylight Saving Time flag. The value is positive if DST is in effect, zero if not and negative if no information is available
No



std::tm window_time_to_C_time_tm( const Windows::SYSTEMTIME& winSysTime )
{
	std::tm		c_time;

c_time.tm_sec		= winSysTime.wSecond;
c_time.tm_min		= winSysTime.wMinute;
c_time.tm_hour		= winSysTime.wHour;
c_time.tm_mday		= winSysTime.wDay;
c_time.tm_mon		= winSysTime.wMonth - 1;
c_time.tm_year		= winSysTime.wYear - 1900; /* 1900 is zero year */
c_time.tm_wday		= winSysTime.wDayOfWeek;
c_time.tm_yday		= /* ignored */
c_time.tm_isdst		= /* ignored */

return c_time;

}



  WORD wYear;
  WORD wMonth;
  WORD wDayOfWeek;
  WORD wDay;
  WORD wHour;
  WORD wMinute;
  WORD wSecond;
  WORD wMilliseconds;

Structure holding a calendar date and time broken down into its components.
Member objects
int tm_sec
	seconds after the minute – [0, 61] (until C++11)[0, 60] (since C++11)[note 1]
(public member object)
int tm_min
	minutes after the hour – [0, 59]
(public member object)
int tm_hour
	hours since midnight – [0, 23]
(public member object)
int tm_mday
	day of the month – [1, 31]
(public member object)
int tm_mon
	months since January – [0, 11]
(public member object)
int tm_year
	years since 1900
(public member object)
int tm_wday
	days since Sunday – [0, 6]
(public member object)
int tm_yday
	days since January 1 – [0, 365]
(public member object)
int tm_isdst
	Daylight Saving Time flag. The value is positive if DST is in effect, zero if not and negative if no information is available
(public member object)
Notes





A file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 A.M. January 1, 1601 Coordinated Universal Time (UTC). The system records file times when applications create, access, and write to files.

#define TICKS_PER_SECOND 10000000
#define EPOCH_DIFFERENCE 11644473600LL
time_t convertWindowsTimeToUnixTime(long long int input){
    long long int temp;
    temp = input / TICKS_PER_SECOND; //convert from 100ns intervals to seconds;
    temp = temp - EPOCH_DIFFERENCE;  //subtract number of seconds between epochs
    return (time_t) temp;
}



#include <windows.h>
#include <time.h>

void TimetToFileTime( time_t t, LPFILETIME pft )
{
    LONGLONG ll = Int32x32To64(t, 10000000) + 116444736000000000;
    pft->dwLowDateTime = (DWORD) ll;
    pft->dwHighDateTime = ll >>32;
}

seconds to millis:
seconds * 1000;

seconds to nanos:
seconds * 1000 * 1000;

seconds to 100-nano units:
seconds * 1000 * 1000 / 100;


Windows::FILETIME   time_t_to_win_filetime(const struct time_t& t)
{

}


std::time_t  win_filetime_to_time_t(const Windows::FILETIME& ft)
{

}



